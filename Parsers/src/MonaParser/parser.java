
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package MonaParser;

import java_cup.runtime.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\054\000\002\002\004\000\002\002\005\000\002\002" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\004\004\000\002\004\006\000" +
    "\002\004\006\000\002\004\006\000\002\006\005\000\002" +
    "\006\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\005\000\002\005\004\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\006\000\002\005\006\000\002\005\006\000" +
    "\002\005\006\000\002\010\003\000\002\010\005\000\002" +
    "\010\003\000\002\010\005\000\002\011\003\000\002\011" +
    "\005\000\002\011\003\000\002\007\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\144\000\044\004\013\005\025\006\016\007\024\010" +
    "\030\011\010\012\012\013\011\015\023\016\022\017\021" +
    "\020\015\022\031\040\007\041\006\042\020\043\017\001" +
    "\002\000\004\002\uffff\001\002\000\014\014\146\023\053" +
    "\024\051\025\050\026\052\001\002\000\004\006\016\001" +
    "\002\000\004\006\016\001\002\000\004\014\ufffd\001\002" +
    "\000\004\014\ufffb\001\002\000\004\014\ufffc\001\002\000" +
    "\016\014\ufff4\021\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4" +
    "\001\002\000\004\002\137\001\002\000\026\004\013\005" +
    "\025\006\016\007\024\020\015\022\031\040\007\041\006" +
    "\042\020\043\017\001\002\000\046\014\uffd6\021\uffd6\023" +
    "\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6" +
    "\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6\044" +
    "\uffd6\045\uffd6\046\uffd6\001\002\000\004\006\016\001\002" +
    "\000\004\006\016\001\002\000\004\006\016\001\002\000" +
    "\004\006\016\001\002\000\004\006\016\001\002\000\030" +
    "\021\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034" +
    "\uffdb\035\uffd7\036\uffdb\037\uffdb\045\uffdb\001\002\000\016" +
    "\014\ufff3\021\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3\001" +
    "\002\000\024\027\072\030\063\031\066\032\071\033\065" +
    "\034\067\036\064\037\062\045\070\001\002\000\004\014" +
    "\060\001\002\000\004\014\ufffe\001\002\000\026\004\013" +
    "\005\025\006\016\007\024\020\015\022\031\040\007\041" +
    "\006\042\020\043\017\001\002\000\030\021\uffdd\027\uffdd" +
    "\030\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffd9\036" +
    "\uffdd\037\uffdd\045\uffdd\001\002\000\010\027\035\030\036" +
    "\035\034\001\002\000\010\006\016\007\040\020\042\001" +
    "\002\000\010\006\016\007\040\020\042\001\002\000\010" +
    "\006\016\007\040\020\042\001\002\000\016\014\uffd9\021" +
    "\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\001\002\000\016" +
    "\014\uffd7\021\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\001" +
    "\002\000\016\014\uffe5\021\uffe5\023\uffe5\024\uffe5\025\uffe5" +
    "\026\uffe5\001\002\000\010\006\016\007\040\020\042\001" +
    "\002\000\004\021\044\001\002\000\024\014\uffd8\021\uffd8" +
    "\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\035" +
    "\uffd8\001\002\000\016\014\uffe6\021\uffe6\023\uffe6\024\uffe6" +
    "\025\uffe6\026\uffe6\001\002\000\016\014\uffe4\021\uffe4\023" +
    "\uffe4\024\uffe4\025\uffe4\026\uffe4\001\002\000\016\014\ufff1" +
    "\021\ufff1\023\ufff1\024\ufff1\025\ufff1\026\ufff1\001\002\000" +
    "\026\004\013\005\025\006\016\007\024\020\015\022\031" +
    "\040\007\041\006\042\020\043\017\001\002\000\026\004" +
    "\013\005\025\006\016\007\024\020\015\022\031\040\007" +
    "\041\006\042\020\043\017\001\002\000\026\004\013\005" +
    "\025\006\016\007\024\020\015\022\031\040\007\041\006" +
    "\042\020\043\017\001\002\000\026\004\013\005\025\006" +
    "\016\007\024\020\015\022\031\040\007\041\006\042\020" +
    "\043\017\001\002\000\016\014\ufff0\021\ufff0\023\ufff0\024" +
    "\051\025\ufff0\026\ufff0\001\002\000\016\014\uffed\021\uffed" +
    "\023\053\024\051\025\050\026\052\001\002\000\016\014" +
    "\uffef\021\uffef\023\uffef\024\uffef\025\uffef\026\uffef\001\002" +
    "\000\016\014\uffee\021\uffee\023\053\024\051\025\050\026" +
    "\uffee\001\002\000\034\004\013\005\025\006\016\007\024" +
    "\015\023\016\022\017\021\020\015\022\031\040\007\041" +
    "\006\042\020\043\017\001\002\000\004\002\000\001\002" +
    "\000\010\006\016\007\040\020\042\001\002\000\010\006" +
    "\016\007\076\020\075\001\002\000\010\006\016\007\040" +
    "\020\042\001\002\000\010\006\016\007\076\020\075\001" +
    "\002\000\010\006\016\007\076\020\075\001\002\000\010" +
    "\006\016\007\076\020\075\001\002\000\004\007\102\001" +
    "\002\000\010\006\016\007\076\020\075\001\002\000\010" +
    "\006\016\007\076\020\075\001\002\000\020\014\uffdd\021" +
    "\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\045\uffdd\001\002" +
    "\000\020\014\uffec\021\uffec\023\uffec\024\uffec\025\uffec\026" +
    "\uffec\045\070\001\002\000\010\006\016\007\076\020\075" +
    "\001\002\000\020\014\uffdb\021\uffdb\023\uffdb\024\uffdb\025" +
    "\uffdb\026\uffdb\045\uffdb\001\002\000\006\021\100\045\070" +
    "\001\002\000\040\014\uffdc\021\uffdc\023\uffdc\024\uffdc\025" +
    "\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc" +
    "\034\uffdc\036\uffdc\037\uffdc\045\uffdc\001\002\000\020\014" +
    "\uffea\021\uffea\023\uffea\024\uffea\025\uffea\026\uffea\045\070" +
    "\001\002\000\040\014\uffda\021\uffda\023\uffda\024\uffda\025" +
    "\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda\033\uffda" +
    "\034\uffda\036\uffda\037\uffda\045\uffda\001\002\000\020\014" +
    "\uffe7\021\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7\045\070" +
    "\001\002\000\020\014\uffe9\021\uffe9\023\uffe9\024\uffe9\025" +
    "\uffe9\026\uffe9\045\070\001\002\000\020\014\uffe8\021\uffe8" +
    "\023\uffe8\024\uffe8\025\uffe8\026\uffe8\045\070\001\002\000" +
    "\016\014\uffe3\021\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3" +
    "\001\002\000\020\014\uffeb\021\uffeb\023\uffeb\024\uffeb\025" +
    "\uffeb\026\uffeb\045\070\001\002\000\016\014\uffe2\021\uffe2" +
    "\023\uffe2\024\uffe2\025\uffe2\026\uffe2\001\002\000\004\014" +
    "\115\001\002\000\010\014\ufff5\044\ufff5\046\113\001\002" +
    "\000\004\006\016\001\002\000\006\014\ufff6\044\ufff6\001" +
    "\002\000\034\004\013\005\025\006\016\007\024\015\023" +
    "\016\022\017\021\020\015\022\031\040\007\041\006\042" +
    "\020\043\017\001\002\000\004\002\ufff9\001\002\000\004" +
    "\014\120\001\002\000\034\004\013\005\025\006\016\007" +
    "\024\015\023\016\022\017\021\020\015\022\031\040\007" +
    "\041\006\042\020\043\017\001\002\000\004\002\ufff8\001" +
    "\002\000\004\014\123\001\002\000\034\004\013\005\025" +
    "\006\016\007\024\015\023\016\022\017\021\020\015\022" +
    "\031\040\007\041\006\042\020\043\017\001\002\000\004" +
    "\002\ufff7\001\002\000\004\044\126\001\002\000\026\004" +
    "\013\005\025\006\016\007\024\020\015\022\031\040\007" +
    "\041\006\042\020\043\017\001\002\000\016\014\uffdf\021" +
    "\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\001\002\000\004" +
    "\044\131\001\002\000\026\004\013\005\025\006\016\007" +
    "\024\020\015\022\031\040\007\041\006\042\020\043\017" +
    "\001\002\000\016\014\uffde\021\uffde\023\uffde\024\uffde\025" +
    "\uffde\026\uffde\001\002\000\012\021\044\027\035\030\036" +
    "\035\034\001\002\000\026\021\100\027\072\030\063\031" +
    "\066\032\071\033\065\034\067\036\064\037\062\045\070" +
    "\001\002\000\014\021\136\023\053\024\051\025\050\026" +
    "\052\001\002\000\016\014\ufff2\021\ufff2\023\ufff2\024\ufff2" +
    "\025\ufff2\026\ufff2\001\002\000\004\002\001\001\002\000" +
    "\004\044\141\001\002\000\026\004\013\005\025\006\016" +
    "\007\024\020\015\022\031\040\007\041\006\042\020\043" +
    "\017\001\002\000\016\014\uffe1\021\uffe1\023\uffe1\024\uffe1" +
    "\025\uffe1\026\uffe1\001\002\000\004\044\144\001\002\000" +
    "\026\004\013\005\025\006\016\007\024\020\015\022\031" +
    "\040\007\041\006\042\020\043\017\001\002\000\016\014" +
    "\uffe0\021\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\001\002" +
    "\000\004\002\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\144\000\020\002\013\003\026\004\003\005\004\007" +
    "\031\010\025\011\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\142\007\111\001\001\000\006\006" +
    "\137\007\111\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\005\134\007\031\010\133\011\132\001\001\000\002" +
    "\001\001\000\006\006\127\007\111\001\001\000\006\006" +
    "\124\007\111\001\001\000\006\006\121\007\111\001\001" +
    "\000\006\006\116\007\111\001\001\000\006\006\110\007" +
    "\111\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\005" +
    "\046\007\031\010\025\011\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\036\011\045\001\001\000" +
    "\006\007\036\011\044\001\001\000\006\007\036\011\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\036\011\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\005\056\007\031\010\025\011\032" +
    "\001\001\000\012\005\055\007\031\010\025\011\032\001" +
    "\001\000\012\005\054\007\031\010\025\011\032\001\001" +
    "\000\012\005\053\007\031\010\025\011\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\004\060\005\004\007\031\010\025\011" +
    "\032\001\001\000\002\001\001\000\006\007\036\011\107" +
    "\001\001\000\006\007\072\010\106\001\001\000\006\007" +
    "\036\011\105\001\001\000\006\007\072\010\104\001\001" +
    "\000\006\007\072\010\103\001\001\000\006\007\072\010" +
    "\102\001\001\000\002\001\001\000\006\007\072\010\100" +
    "\001\001\000\006\007\072\010\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\072\010\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\006\113\007\111\001\001\000\002\001\001\000" +
    "\014\004\115\005\004\007\031\010\025\011\032\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\004\120\005" +
    "\004\007\031\010\025\011\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\004\123\005\004\007\031\010" +
    "\025\011\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\005\126\007\031\010\025\011\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\005\131\007\031" +
    "\010\025\011\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\005\141\007" +
    "\031\010\025\011\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\005\144\007\031\010\025\011\032\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




public void syntax_error(Symbol currToken) {
    if (currToken.value == null) {
        ErrMsg.fatal(0,0, "Syntax error at end of file");
    }
    else {
        ErrMsg.fatal(((TokenVal)currToken.value).linenum,
                     ((TokenVal)currToken.value).charnum,
                     "Syntax error");
    }
    System.exit(-1);
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= header SEMICOLON declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // header ::= WS1S 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // header ::= WS2S 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // header ::= M2LSTR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // header ::= M2LTREE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaration ::= formula SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaration ::= VAR0 varNames SEMICOLON declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaration ::= VAR1 varNames SEMICOLON declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaration ::= VAR2 varNames SEMICOLON declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // varNames ::= var COMMA varNames 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varNames",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // varNames ::= var 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varNames",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // formula ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("formula",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // formula ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("formula",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // formula ::= LPAREN formula RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("formula",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // formula ::= NEGATION formula 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("formula",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // formula ::= formula OR formula 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("formula",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // formula ::= formula AND formula 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("formula",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // formula ::= formula IMPLICATION formula 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("formula",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // formula ::= formula EQUIVALENCE formula 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("formula",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // formula ::= fot EQUALS fot 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("formula",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // formula ::= fot NOTEQUALS fot 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("formula",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // formula ::= fot LESS fot 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("formula",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // formula ::= fot GREATER fot 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("formula",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // formula ::= fot LESSEQ fot 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("formula",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // formula ::= fot GREATEREQ fot 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("formula",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // formula ::= sot EQUALS sot 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("formula",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // formula ::= sot NOTEQUALS sot 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("formula",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // formula ::= sot SUB sot 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("formula",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // formula ::= fot IN sot 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("formula",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // formula ::= fot NOTIN sot 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("formula",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // formula ::= EX1 varNames COLON formula 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("formula",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // formula ::= EX2 varNames COLON formula 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("formula",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // formula ::= ALL1 varNames COLON formula 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("formula",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // formula ::= ALL2 varNames COLON formula 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("formula",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // fot ::= var 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fot",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // fot ::= LPAREN fot RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fot",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // fot ::= INTLITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fot",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // fot ::= fot PLUS INTLITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fot",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // sot ::= var 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sot",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // sot ::= LPAREN sot RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sot",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // sot ::= INTLITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sot",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // var ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
